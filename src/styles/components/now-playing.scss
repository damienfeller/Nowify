/* -----------------------------------
 * SCSS snippet for 90° anti-clockwise rotation
 * ensuring the layout still fills the screen.
 * Copy & Paste this into your now-playing.scss
 * ----------------------------------- */
html,
body {
  margin: 0;
  padding: 0;
  width: 100vw;
  height: 100vh;
  overflow: hidden; /* Prevent scrollbars if the rotated content spills outside */
}

.now-playing {
  /* Position absolute so we can swap width/height and translate the element properly. */
  position: absolute;
  top: 0;
  left: 0;

  /* After rotating -90°, width becomes “height” in visual space and vice versa. */
  width: 100vh; /* swapped from 100vw */
  height: 100vw; /* swapped from 100vh */

  /* Pivot from the top-left corner, rotate 90° anti-clockwise, then translate to bring it on-screen. */
  transform-origin: top left;
  transform: rotate(-90deg) translateX(-100vh);

  /* Normal layout rules (flex, background, etc.) */
  display: flex;
  flex-flow: row nowrap;
  margin: 0;
  padding: 0;
  background-color: var(--colour-background-now-playing); // fallback background if needed

  &__cover {
    flex: 1; // take up half (or however much) of the container
    display: flex;
    align-items: center;      // center image vertically
    justify-content: center;  // center image horizontally
    padding: 0;               // optional
  }

  &__image {
    width: auto;
    height: 100%;             // fill the full vertical space
    object-fit: cover;        // or contain if you prefer not to crop
    display: block;
    box-shadow: 1px 1px 16px -2px rgba(0, 0, 0, 0.3);
  }

  &__details {
    flex: 1;                   // the other half of the screen
    padding: 2rem;             // adjust as needed
    color: var(--color-text-primary);
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  &__track {
    font-size: clamp(1.5rem, 5vw, 3rem);
    font-weight: var(--font-weight-heading);
    margin: 0 0 1rem 0;
  }

  &__artists {
    font-size: clamp(1rem, 3vw, 2rem);
    opacity: 0.8;
  }

  // Active / Idle states
  &--active {
    /* styling for active state if needed */
  }

  &--idle {
    /* styling for idle state if needed */
  }
}
